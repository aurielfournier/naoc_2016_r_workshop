temp_fun<-function(temp_values){
for(i in temp_values){
d<-i*9/5 +32
ifelse(d<50,print(paste0(d,' degrees is cold')), print(d))
rm(temp_values)
}}
#this runs our for loop for whatever vector of values you want
temp_fun(1)
temp_fun(c(1:100))
warnings()()
warnings()
data(mtcars)
head(mtcars)
row.names(mtcars)=='Pontiac Firebird'
colnames(mtcars)=='mpg'
mtcars %>%
add_rownames(var="model") %>%
filter(model=='Pontiac Firebird') %>%
select(mpg)
library (dplyr)
library (ggplot2)
data(mtcars)
head(mtcars)
mtcars %>%
add_rownames(var="model") %>%
filter(model=='Pontiac Firebird') %>%
select(mpg)
mtcars %>%
rownames_to_column(var="model") %>%
filter(model=='Pontiac Firebird') %>%
select(mpg)
library(tibble)
mtcars %>%
tibble::rownames_to_column(var="model") %>%
filter(model=='Pontiac Firebird') %>%
select(mpg)
mtcars[25,1]
data<-read.csv('~/naoc_2016_r_workshop/ebird_data.csv')
data<-read.csv('~/naoc_2016_r_workshop/ebird_data.csv')
dat <- read.csv('~/naoc_2016_r_workshop/ebird_data.csv')
dat %>% head
data[data$breeder==1 & data$passerine==1,grepl('^X',colnames(data))]
dat <- read.csv('~/naoc_2016_r_workshop/ebird_data.csv')
head(dat)
data[data$breeder==1 & data$passerine==1,grepl('^X',colnames(data))]
dat[dat$breeder==1 & dat$passerine==1,grepl('^X',colnames(dat))]
result <- data %>%
filter(breeder==1,
passerine==1) %>%
select(contains('X')) %>%
gather("quarter_month","value")
head(dat)
result <- dat %>%
filter(breeder==1,
passerine==1) %>%
select(contains('X')) %>%
gather("quarter_month","value")
library(tidyr)
result <- dat %>%
filter(breeder==1,
passerine==1) %>%
select(contains('X')) %>%
gather("quarter_month","value")
ggplot(data=result, aes(x=quarter_month, y=value)) +
geom_point()
paste('hello','world')
#paste0 does not
paste0('hello','world')
#so we have to tell it what we want between each object
paste0('hello',' ','world')
# say we want  to have a program that you give its name, and it tells you hello
name<-'Matt'
paste0('hello, ',name,' how are you?')
# say we want  to have a program that you give its name, and it tells you hello
name<-'Matt'
paste0('hello, ',name,' how are you?')
##we can write this as a function easily
foo<-function(name){paste0('hello,',name,' how are you')}
foo(name='matt')
foo('matt')
# say we want  to have a program that you give its name, and it tells you hello
name<-'Matt'
paste0('hello, ',name,' how are you?')
##we can write this as a function easily
foo<-function(name){paste0('hello, ',name,' how are you')}
foo(name='matt')
foo('matt')
folder<-'Monstersinc'
file<-'scaretotal_MikeW_March.csv'
paste0(folder,'/',file)   # so its going to look in what ever folder we told it (Monstersinc in this case)
read.csv(paste0(folder,'/',file))
name<-'MikeW'
month<-'March'
data<-read.csv(paste0('scaretotal_',name,'_',month,'.csv'))
data<-read.csv(paste0(folder,'/','scaretotal_',name,'_',month,'.csv'))
head(data)
our.list<-list()
##now lets put it all together, lets make it so reads in all the files for both Mike and James for
# both the months of March and April
name<-c('MikeW','JamesS')
month<-c('March','April')
####code#########
for(i in name){
for(p in month){
our.list[[paste0(i,'_',p)]]<-read.csv(paste0(folder,'/','scaretotal_',i,'_',p,'.csv'))
}  ##end p loop
}   ###end i loop
summary(our.list)
data<-c(1:10)   ###data as a vector
ci<-.01         ###confidence
sd.data<-sd(data)   #this function calculates the standard deviation, whew that was easy
n<-length(data)    #length takes the length of a vector, well thats the same as N, right?
sem<-sd.data/n    # put them together. And there we go, we have sd/sqrt(n) also known as the standard error of the mean (sem)
tvalue<-qt(ci,(length(data)-1))   ###with that we can write this
mean.data<-mean(data)   ##the mean can be calculated with the mean function
sem*tvalue   ##gives us our interval
upper<-mean.data + sem*tvalue   ##putting it all together, this gives us our upper range
lower<-mean.data - sem*tvalue   ## our lower
data<-c(1:10)   ###data as a vector
ci<-.01         ###confidence
########################################
##start of code
if(ci>abs(1)){print("You can't have a probability greater than 1 stupid!")}else{
sd.data<-sd(data)
n<-length(data)
sem<-sd.data/n
tvalue<-qt(ci,(length(data)-1))
mean.data<-mean(data)
upper<-mean.data + sem*tvalue
lower<-mean.data - sem*tvalue
print(paste0('your upper bound is: (',upper, ') and your lower bound is: (', lower,"), and your mean is: (", mean.data,')'))
list1<-list(upperbound=upper,lowerbound=lower,mean=mean.data)
}
if(ci>abs(1)){print("You can't have a probability greater than 1 you goof!")}else{
sd.data<-sd(data)
n<-length(data)
sem<-sd.data/n
tvalue<-qt(ci,(length(data)-1))
mean.data<-mean(data)
upper<-mean.data + sem*tvalue
lower<-mean.data - sem*tvalue
print(paste0('your upper bound is: (',upper, ') and your lower bound is: (', lower,"), and your mean is: (", mean.data,')'))
list1<-list(upperbound=upper,lowerbound=lower,mean=mean.data)
}
CI.fun<-function(data,ci){
if(ci>abs(1)){print("You can't have a probability greater than 1 you goof!")}else{
sd.data<-sd(data)
n<-length(data)
sem<-sd.data/n
tvalue<-qt(ci,(length(data)-1))
mean.data<-mean(data)
upper<-mean.data + sem*tvalue
lower<-mean.data - sem*tvalue
print(paste0('your upper bound is: (',upper, ') and your lower bound is: (', lower,"), and your mean is: (", mean.data,')'))
list1<-list(upperbound=upper,lowerbound=lower,mean=mean.data)
}}
CI.fun(1:100,.95)    ##try it with a data vector of all integers between 1 and 100
CI.fun(sample.int(100,20),.95)   ###try it with a data vector of 20 random numbers
CI.fun(1:10,2)
###heres how you would write the function shorter
# remember if you use a variable more than once, just store it as a value to make your life easier
CI.fun<-function(data,ci){
range<-sd(data)/length(data) * qt(ci,(length(data)-1))
mean.data<-mean(data)
list1<-list(upper=mean.data+range,lower=mean.data-range,mean=mean.data)
print(list1)
}
result<-CI.fun(1:10,.95)
some_random_data <- data.frame(a=1:10, b=rep(200,10),c="BIRDS RULE")
# Personal R Package
# This is all based off of/copied from the great blog post by Hilary Parker
# https://hilaryparker.com/2014/04/29/writing-an-r-package-from-scratch/
# all credit to Hilary @hspter
# Step 0
library("devtools")
devtools::install_github("klutometis/roxygen")
library(roxygen2)
create("package")
# Step 0
library("devtools")
devtools::install_github("klutometis/roxygen")
library(roxygen2)
# step 1
#setwd("parent_directory")
create("package")
install.packages('devtools')
# Step 0
library("devtools")
devtools::install_github("klutometis/roxygen")
library(roxygen2)
# step 1
#setwd("parent_directory")
create("package")
# Personal R Package
# This is all based off of/copied from the great blog post by Hilary Parker
# https://hilaryparker.com/2014/04/29/writing-an-r-package-from-scratch/
# all credit to Hilary @hspter
# Step 0
library("devtools")
devtools::install_github("klutometis/roxygen")
library(roxygen2)
# step 1
#setwd("parent_directory")
create("package")
# step 2
rail_function <- function(love=TRUE){
if(love==TRUE){
print("I love RAILS!")
}
else {
print("I am not a cool person.")
}
}
# copy and paste the function above into a seperate script and save it as rail_function.R in the 'R' directory in your new folder
########## Data in a package
# you can also store data in a package, which is super handy. to do this
some_random_data <- data.frame(a=1:10, b=rep(200,10),c="BIRDS RULE")
save(some_random_data, file="~/naoc_2016_r_workshop/package/")
# Step 3
# add some documentation to the top of your function
# future you will thank you
#' A Rail Function
#'
#' This function allows you to express your love of rails.
#' @param love Do you love rails? Defaults to TRUE.
#' @keywords rails
#' @export
#' @examples
#' rail_function()
save(some_random_data, file="~/naoc_2016_r_workshop/package/data/some_random_data.rdat")
setwd("./package")
document()
setwd("..")
install("package")
rail_function
rail_function()
data(some_random_data)
data("some_random_data")
?package.contents
?package
head(some_random_data)
# Personal R Package
# This is all based off of/copied from the great blog post by Hilary Parker
# https://hilaryparker.com/2014/04/29/writing-an-r-package-from-scratch/
# all credit to Hilary @hspter
# Step 0
library("devtools")
devtools::install_github("klutometis/roxygen")
library(roxygen2)
# step 1
#setwd("parent_directory")
create("package")
# step 2
rail_function <- function(love=TRUE){
if(love==TRUE){
print("I love RAILS!")
}
else {
print("I am not a cool person.")
}
}
# copy and paste the function above into a seperate script and save it as rail_function.R in the 'R' directory in your new folder
########## Data in a package
# you can also store data in a package, which is super handy. to do this
some_random_data <- data.frame(a=1:10, b=rep(200,10),c="BIRDS RULE")
save(some_random_data, file="~/naoc_2016_r_workshop/package/data/some_random_data.rdat")
# Step 3
# add some documentation to the top of your function
# future you will thank you
#' A Rail Function
#'
#' This function allows you to express your love of rails.
#' @param love Do you love rails? Defaults to TRUE.
#' @keywords rails
#' @export
#' @examples
#' rail_function()
# you should also document your data!
#' some data Auriel cooked up
#'
#' #'
#' @format A data frame with 10 rows and 3 columns
#' \describe{
#'   \item{a}{numbers from 1 to 10}
#'   \item{b}{the number 200}
#'   \item{c}{proof that BIRDS RULE}
#' }
#' @source NAOC 2016
# step 4
# This automatically adds in the .Rd files to the man directory, and adds a NAMESPACE file to the main directory. You can read up more about these, but in terms of steps you need to take, you really don't have to do anything further.
setwd("./package")
document()
# step 5
setwd("..")
install("package")
data(some_random_data)
load(some_random_data)
load(raildata)
library(raildata)
data(allbirds)
# updating the raildata package
library(devtools)
library(roxygen2)
late14 <- c("scmsu2","scmsu3","m11","ts6a","ash","ts2a","ts4a","ccmsu2","kt9","kt6","dc22","dc20","os23","pooli")
early14 <- c("rail","sanctuary","sgd","sgb","pool2","pool2w","m13","m10","ts8a","ccmsu12","kt5","kt2","dc14","dc18","os21","poole","poolc")
late15 <- c("scmsu2","scmsu3","m11","ts6a","ash","ts2a","ts4a","ccmsu2","kt9","kt6","dc22","dc20","os23","pooli")
early15 <- c("rail","sanctuary","sgd","sgb","pool2","pool2w","m13","m10","ts8a","ccmsu12","kt5","kt2","dc14","dc18","os21","poole","poolc")
impound_treatments <- data.frame(year = c(rep(2014, length(late14)),rep(2014, length(early14)), rep(2015, length(late15)),rep(2015, length(early15))),
treat = c(rep("late", length(late14)),rep("early", length(early14)), rep("late", length(late15)),rep("early", length(early15))),
impound = c(late14, early14, late15, early15))
save(impound_treatments, file="~/raildata/data/impound_treatments.rda")
load("./data/sarah_models.Rdata")
save(density.models, file="~/raildata/data/gdistsamp_models.rda")
vegDONE <- read.csv("~/data/veg_DONE.csv" , stringsAsFactors = FALSE)
save(vegDONE, file="~/raildata/data/vegDONE.rda")
soraDONE <- read.csv("~/data/sora_DONE.csv" , stringsAsFactors = FALSE)
save(soraDONE, file="~/raildata/data/soraDONE.rda")
waterfowl2014 <- read.csv("~/data/2014_waterfowl.csv" , stringsAsFactors = FALSE)
save(waterfowl2014, file="~/raildata/data/waterfowl2014.rda")
waterfowl2015 <- read.csv("~/data/2015_waterfowl.csv" , stringsAsFactors = FALSE)
save(waterfowl2015, file="~/raildata/data/waterfowl2015.rda")
allbirds <- read.csv("~/data/all_birds.csv" , stringsAsFactors = FALSE)
save(allbirds, file="~/raildata/data/allbirds.rda")
allsurveys <- read.csv("~/data/all_surveys.csv" , stringsAsFactors = FALSE)
save(allsurveys, file="~/raildata/data/allsurveys.rda")
allveg <- read.csv("~/data/all_veg.csv", stringsAsFactors = FALSE)
save(allveg, file="~/raildata/data/allveg.rda")
a <- read.csv("./data/sara_abundances.csv" , stringsAsFactors = FALSE)
a <- a[,2:ncol(a)]
save(a, file="~/raildata/data/sora_abundances.rda")
waterfowlmaster <- read.csv("~/Dissertation_Chapter_4_Experiment/master_waterfowl.csv",stringsAsFactors = FALSE)
save(waterfowlmaster, file="~/raildata/data/master_waterfowl.rda")
# documentation
setwd("~/raildata")
document()
#install
setwd("..")
install("raildata")
library(raildata)
data("all_birds")
head(all_birds)
data("some_random_data")
library(package)
data("some_random_data")
save(some_random_data, file="~/naoc_2016_r_workshop/package/data/some_random_data.rda")
# Step 3
# add some documentation to the top of your function
# future you will thank you
#' A Rail Function
#'
#' This function allows you to express your love of rails.
#' @param love Do you love rails? Defaults to TRUE.
#' @keywords rails
#' @export
#' @examples
#' rail_function()
# you should also document your data!
#' some data Auriel cooked up
#'
#' #'
#' @format A data frame with 10 rows and 3 columns
#' \describe{
#'   \item{a}{numbers from 1 to 10}
#'   \item{b}{the number 200}
#'   \item{c}{proof that BIRDS RULE}
#' }
#' @source NAOC 2016
# step 4
# This automatically adds in the .Rd files to the man directory, and adds a NAMESPACE file to the main directory. You can read up more about these, but in terms of steps you need to take, you really don't have to do anything further.
setwd("./package")
document()
# step 5
setwd("..")
install("package")
setwd("~/naoc_2016_r_workshop")
setwd("./package")
document()
setwd("..")
install("package")
data("some_random_data")
rail_function()
